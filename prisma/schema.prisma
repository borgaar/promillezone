// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String                @id @default(cuid())
    name                String?
    email               String?               @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    collective          Collective?           @relation(fields: [collectiveId], references: [id])
    collectiveId        String?
    JoinCollectiveToken JoinCollectiveToken[]
    CompletedChore      CompletedChore[]
    ShoppingListItem    ShoppingListItem[]
    RoomBooking         RoomBooking[]
}

model Collective {
    id                  String                @id @default(uuid())
    name                String
    streetName          String
    houseNumber         String
    postalCode          String
    trashAddressId      String?
    trashProviderSlug   String?
    users               User[]
    JoinCollectiveToken JoinCollectiveToken[]
    Chore               Chore[]
    ShoppingListItem    ShoppingListItem[]
    RoomBooking         RoomBooking[]
}

model JoinCollectiveToken {
    token        String     @id @default(uuid())
    expiresAt    DateTime
    user         User       @relation(fields: [createdBy], references: [id])
    createdBy    String
    collectiveId String
    collective   Collective @relation(fields: [collectiveId], references: [id])
}

model Chore {
    id             String           @id @default(uuid())
    description    String
    collective     Collective       @relation(fields: [collectiveId], references: [id])
    collectiveId   String
    frequency      Int
    startingDate   DateTime
    CompletedChore CompletedChore[]

    @@unique([collectiveId, description])
}

model CompletedChore {
    id          String   @id @default(uuid())
    choreId     String
    chore       Chore    @relation(fields: [choreId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    choreDueAt  DateTime
    completedAt DateTime
}

model ShoppingListItem {
    collectiveId String
    collective   Collective @relation(fields: [collectiveId], references: [id], onDelete: Cascade)
    item         String
    isBought     Boolean
    createdAt    DateTime   @default(now())
    createdById  String
    createdBy    User       @relation(fields: [createdById], references: [id])
    updatedAt    DateTime   @updatedAt

    @@id([collectiveId, item])
}

model RoomBooking {
    id           String     @id @default(uuid())
    date         DateTime
    collective   Collective @relation(fields: [collectiveId], references: [id])
    collectiveId String
    bookerId     String
    booker       User       @relation(fields: [bookerId], references: [id])

    @@unique([date, collectiveId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
